
(define *socket-path* "test.sock")

(define (read-and-report name port)
  (let ((res (read port)))
    (display "[")
    (display name)
    (display "] Receive: ")
    (pp res)
    res))

(define (make-client name)
 (make-thread
   (lambda ()
     (let ((socket (domain-socket-connect *socket-path*)))
       (write (list name) socket)
       (let ((res (read-and-report name socket)))
	 (close-port socket)
	 res)))
   name))

(let ((ds (make-domain-socket *socket-path* 10))
      (c1 (make-client "alpha"))
      (c2 (make-client "beta")))
  (thread-run! c1)
  (thread-run! c2)
  (let* ((p1 (domain-socket-accept ds))
	 (p2 (domain-socket-accept ds))
	 (res (append (read-and-report "server" p1)
		      (read-and-report "server" p2))))
    (write #t p1)
    (write #t p2)
    (close-port p1)
    (close-port p2)
    (delete-domain-socket ds)
    (if (and (equal? (car res) "alpha")
	     (equal? (cadr res) "beta")
	     (thread-join! c1)
	     (thread-join! c2))
	(begin
	  (display "Test passed")
	  (newline)
	  (exit 0))
	(begin
	  (display "Test FAILED")
	  (newline)
	  (exit 1)))))
